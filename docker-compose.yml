version: '3.8'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - spotify_network
    restart: always

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    env_file:
      - ./config/kafka.env
    environment:
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9093
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    restart: always
    volumes:
      - ./:/app
    ports:
      - "9093:9093"
    depends_on:
      - zookeeper
    networks:
      - spotify_network

  postgres:
    image: postgres:13
    container_name: postgres
    env_file:
      - ./config/postgres.env
    ports:
      - "5432:5432"
    networks:
      - spotify_network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  airflow-init:
    image: apache/airflow:2.5.1
    container_name: airflow-init
    env_file:
      - ./config/postgres.env
      - ./config/airflow.env
    command: ["bash", "-c", "until pg_isready -h postgres -p 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; airflow db init && airflow users create --role Admin --username admin --password admin --firstname Admin --lastname User --email admin@example.com"]
    depends_on:
      - postgres
    networks:
      - spotify_network
    restart: "no"
    volumes:
      - ./:/opt/airflow/app
#      - ./:/opt/airflow/logs

  airflow-webserver:
    image: apache/airflow:2.5.1
    container_name: webserver
    env_file:
      - ./config/postgres.env
      - ./config/airflow.env
    command: ["airflow", "webserver"]
    ports:
      - "8080:8080"
    depends_on:
      - airflow-init
    networks:
      - spotify_network
    restart: always
    volumes:
      - ./:/opt/airflow/app
#      - ./:/opt/airflow/logs

  airflow-scheduler:
    image: apache/airflow:2.5.1
    container_name: scheduler
    env_file:
      - ./config/postgres.env
      - ./config/airflow.env
    command: ["airflow", "scheduler"]
    depends_on:
      - airflow-init
    networks:
      - spotify_network
    restart: always
    volumes:
      - ./:/opt/airflow/app
#      - ./:/opt/airflow/logs

networks:
  spotify_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
